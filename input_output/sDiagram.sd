DesignParser:DesignParser[a]
PrintStream:PrintStream
String:String
System:System
Runtime:Runtime
NullPointerException:NullPointerException
Character:Character
Locale:Locale
ConditionalSpecialCasing:ConditionalSpecialCasing
SecurityManager:SecurityManager
Properties:Properties
Object:Object
Integer:Integer
Long:Long
Float:Float
Double:Double
StringBuilder:StringBuilder
AbstractStringBuilder:AbstractStringBuilder
JFileChooser:JFileChooser
JComponent:JComponent
Vector:Vector
FileSystemView:FileSystemView
ArrayList:ArrayList
AbstractList:AbstractList
IllegalArgumentException:IllegalArgumentException
Arrays:Arrays
File:File
Math:Math
StringIndexOutOfBoundsException:StringIndexOutOfBoundsException
Arrays$ArrayList:Arrays$ArrayList
VisitorManager:VisitorManager
ClassReader:ClassReader
ClassDeclarationVisitor:ClassDeclarationVisitor
ClassFieldVisitor:ClassFieldVisitor
ClassMethodVisitor:ClassMethodVisitor
AbstractClassDataVisitor:AbstractClassDataVisitor
GraphVisPrinter:GraphVisPrinter
HashMap:HashMap
StringParser:StringParser
FileOutputStream:FileOutputStream
OutputStream:OutputStream
FileNotFoundException:FileNotFoundException
FileDescriptor:FileDescriptor
FilterOutputStream:FilterOutputStream
NumberFormatException:NumberFormatException
MethodCallData:MethodCallData
SDEditPrinter:SDEditPrinter

DesignParser:PrintStream.println(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:String=String.valueOf(double)
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
DesignParser:System.exit(int)
System:Runtime=Runtime.getRuntime()
System:Runtime.exit(int)
DesignParser:String=String.toLowerCase()
String:NullPointerException.<init>(String)
String:int=String.codePointAt(int)
String:int=Character.toLowerCase(int)
String:int=Character.charCount(int)
String:int=Character.toLowerCase(int)
String:System.arraycopy(Object, int, Object, int, int)
String:String=Locale.getLanguage()
String:int=String.codePointAt(int)
String:int=Character.charCount(int)
String:int=ConditionalSpecialCasing.toLowerCaseEx(String, int, Locale)
String:int=Character.toLowerCase(int)
String:char[]=ConditionalSpecialCasing.toLowerCaseCharArray(String, int, Locale)
String:char[]=Character.toChars(int)
String:char[]=Character.toChars(int)
String:System.arraycopy(Object, int, Object, int, int)
String:String.<init>(char[], boolean)
String:Locale=Locale.getDefault(Locale$Category)
String:String=String.toLowerCase()
DesignParser:boolean=String.equals(Object)
DesignParser:String=System.getProperty(String, String)
System:System.checkKey(String)
System:SecurityManager=System.getSecurityManager()
System:SecurityManager.checkPropertyAccess(String)
System:String=Properties.getProperty(String, String)
System:System.checkKey(String)
System:SecurityManager=System.getSecurityManager()
System:SecurityManager.checkPropertyAccess(String)
System:String=Properties.getProperty(String, String)
DesignParser:String=String.valueOf(double)
String:String=Object.toString()
String:String.<init>(char[], boolean)
String:String.<init>(char[], boolean)
String:String.<init>(char[], boolean)
String:String=Integer.toString()
String:String=Long.toString()
String:String=Float.toString()
String:String=Double.toString()
DesignParser:StringBuilder.<init>(CharSequence)
StringBuilder:AbstractStringBuilder.<init>(int)
StringBuilder:AbstractStringBuilder.<init>(int)
StringBuilder:int=String.length()
StringBuilder:AbstractStringBuilder.<init>(int)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:StringBuilder.<init>(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
DesignParser:Appendable=StringBuilder.append(CharSequence)
StringBuilder:String=String.valueOf(double)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=AbstractStringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
StringBuilder:Appendable=StringBuilder.append(CharSequence)
DesignParser:String=StringBuilder.toString()
StringBuilder:String.<init>(char[], boolean)
DesignParser:JFileChooser.<init>(String, FileSystemView)
JFileChooser:JFileChooser.<init>(String, FileSystemView)
JFileChooser:JFileChooser.<init>(String, FileSystemView)
JFileChooser:JFileChooser.<init>(String, FileSystemView)
JFileChooser:JFileChooser.<init>(String, FileSystemView)
JFileChooser:JComponent.<init>()
JFileChooser:Vector.<init>(Collection<+TE>)
JFileChooser:JFileChooser.setup(FileSystemView)
JFileChooser:JFileChooser.setCurrentDirectory(File)
JFileChooser:JComponent.<init>()
JFileChooser:Vector.<init>(Collection<+TE>)
JFileChooser:JFileChooser.setup(FileSystemView)
JFileChooser:JFileChooser.setCurrentDirectory(File)
JFileChooser:File=FileSystemView.createFileObject(String)
JFileChooser:JFileChooser.setCurrentDirectory(File)
DesignParser:JFileChooser.setMultiSelectionEnabled(boolean)
JFileChooser:JFileChooser.firePropertyChange()
DesignParser:int=JFileChooser.showOpenDialog(Component)
JFileChooser:JFileChooser.setDialogType(int)
JFileChooser:int=JFileChooser.showDialog(Component, String)
DesignParser:File[]=JFileChooser.getSelectedFiles()
DesignParser:ArrayList.<init>(Collection<+TE>)
ArrayList:AbstractList.<init>()
ArrayList:StringBuilder.<init>(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:String=StringBuilder.toString()
ArrayList:IllegalArgumentException.<init>(Throwable)
ArrayList:AbstractList.<init>()
ArrayList:AbstractList.<init>()
ArrayList:Class<*>>=Object.getClass()
ArrayList:boolean[]=Arrays.copyOf(boolean[], int)
DesignParser:String=File.getPath()
DesignParser:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:double=Math.min(double, double)
String:int=String.lastIndexOfSupplementary(int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
DesignParser:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:double=Math.min(double, double)
String:int=String.lastIndexOfSupplementary(int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
DesignParser:String=String.substring(int, int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
DesignParser:List<TT>=Arrays.asList([TT)
Arrays:Arrays$ArrayList.<init>([TE)
DesignParser:ArrayList.<init>(Collection<+TE>)
ArrayList:AbstractList.<init>()
ArrayList:StringBuilder.<init>(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:String=StringBuilder.toString()
ArrayList:IllegalArgumentException.<init>(Throwable)
ArrayList:AbstractList.<init>()
ArrayList:AbstractList.<init>()
ArrayList:Class<*>>=Object.getClass()
ArrayList:boolean[]=Arrays.copyOf(boolean[], int)
DesignParser:AbstractClassDataVisitor=VisitorManager.visitClass(String)
VisitorManager:ClassReader.<init>(String)
VisitorManager:ClassDeclarationVisitor.<init>(int, AbstractClassDataVisitor)
VisitorManager:ClassFieldVisitor.<init>(int, AbstractClassDataVisitor)
VisitorManager:ClassMethodVisitor.<init>(int, AbstractClassDataVisitor)
VisitorManager:ClassReader.accept(ClassVisitor, Attribute[], int)
VisitorManager:AbstractClassDataVisitor.updateFromDecorated()
DesignParser:GraphVisPrinter.<init>(List<AbstractClassDataVisitor>)
GraphVisPrinter:Object.<init>()
GraphVisPrinter:HashMap.<init>(Map<+TK>, +TV)
GraphVisPrinter:HashMap.<init>(Map<+TK>, +TV)
GraphVisPrinter:HashMap.<init>(Map<+TK>, +TV)
GraphVisPrinter:HashMap.<init>(Map<+TK>, +TV)
GraphVisPrinter:List<String>=StringParser.getClassNames(List<AbstractClassDataVisitor>)
DesignParser:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:File.<init>(URI)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:File.<init>(URI)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:OutputStream.<init>()
FileOutputStream:Object.<init>()
FileOutputStream:String=File.getPath()
FileOutputStream:SecurityManager=System.getSecurityManager()
FileOutputStream:SecurityManager.checkWrite(String)
FileOutputStream:NullPointerException.<init>(String)
FileOutputStream:boolean=File.isInvalid()
FileOutputStream:FileNotFoundException.<init>(String, String)
FileOutputStream:FileDescriptor.<init>()
FileOutputStream:FileDescriptor.attach(Closeable)
FileOutputStream:FileOutputStream.open(String, boolean)
FileOutputStream:OutputStream.<init>()
FileOutputStream:Object.<init>()
FileOutputStream:SecurityManager=System.getSecurityManager()
FileOutputStream:NullPointerException.<init>(String)
FileOutputStream:SecurityManager.checkWrite(String)
FileOutputStream:FileDescriptor.attach(Closeable)
DesignParser:FilterOutputStream.<init>(OutputStream)
FilterOutputStream:OutputStream.<init>()
DesignParser:OutputStream.close()
DesignParser:String=String.toLowerCase()
String:NullPointerException.<init>(String)
String:int=String.codePointAt(int)
String:int=Character.toLowerCase(int)
String:int=Character.charCount(int)
String:int=Character.toLowerCase(int)
String:System.arraycopy(Object, int, Object, int, int)
String:String=Locale.getLanguage()
String:int=String.codePointAt(int)
String:int=Character.charCount(int)
String:int=ConditionalSpecialCasing.toLowerCaseEx(String, int, Locale)
String:int=Character.toLowerCase(int)
String:char[]=ConditionalSpecialCasing.toLowerCaseCharArray(String, int, Locale)
String:char[]=Character.toChars(int)
String:char[]=Character.toChars(int)
String:System.arraycopy(Object, int, Object, int, int)
String:String.<init>(char[], boolean)
String:Locale=Locale.getDefault(Locale$Category)
String:String=String.toLowerCase()
DesignParser:boolean=String.equals(Object)
DesignParser:PrintStream.println(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:String=String.valueOf(double)
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
DesignParser:System.exit(int)
System:Runtime=Runtime.getRuntime()
System:Runtime.exit(int)
DesignParser:int=Integer.parseInt(String)
Integer:NumberFormatException.<init>(String)
Integer:StringBuilder.<init>(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:String=StringBuilder.toString()
Integer:NumberFormatException.<init>(String)
Integer:StringBuilder.<init>(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:Appendable=StringBuilder.append(CharSequence)
Integer:String=StringBuilder.toString()
Integer:NumberFormatException.<init>(String)
Integer:int=String.length()
Integer:char=String.charAt(int)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:char=String.charAt(int)
Integer:int=Character.digit(int, int)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:NumberFormatException=NumberFormatException.forInputString(String)
Integer:int=Integer.parseInt(String)
DesignParser:ArrayList.<init>(Collection<+TE>)
ArrayList:AbstractList.<init>()
ArrayList:StringBuilder.<init>(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:Appendable=StringBuilder.append(CharSequence)
ArrayList:String=StringBuilder.toString()
ArrayList:IllegalArgumentException.<init>(Throwable)
ArrayList:AbstractList.<init>()
ArrayList:AbstractList.<init>()
ArrayList:Class<*>>=Object.getClass()
ArrayList:boolean[]=Arrays.copyOf(boolean[], int)
DesignParser:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:double=Math.min(double, double)
String:int=String.lastIndexOfSupplementary(int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
DesignParser:String=String.substring(int, int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
DesignParser:MethodCallData.<init>()
MethodCallData:Object.<init>()
DesignParser:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:double=Math.min(double, double)
String:int=String.lastIndexOfSupplementary(int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
DesignParser:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:double=Math.min(double, double)
String:int=String.lastIndexOfSupplementary(int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
String:int=String.lastIndexOf(char[], int, int, char[], int, int, int)
DesignParser:String=String.substring(int, int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:StringIndexOutOfBoundsException.<init>(int)
String:String.<init>(char[], boolean)
DesignParser:List<IMethodCallData>=VisitorManager.getMethodCalls(IMethodCallData)
VisitorManager:ArrayList.<init>(Collection<+TE>)
VisitorManager:ClassMethodVisitor=VisitorManager.visitMethods(String, IMethodCallData)
VisitorManager:List<IMethodCallData>=ClassMethodVisitor.getMethodCalls()
VisitorManager:List<IMethodCallData>=VisitorManager.getMethodCalls(IMethodCallData)
DesignParser:SDEditPrinter.<init>(List<IMethodCallData>, String)
SDEditPrinter:Object.<init>()
DesignParser:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:File.<init>(URI)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:File.<init>(URI)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:FileOutputStream.<init>(FileDescriptor)
FileOutputStream:OutputStream.<init>()
FileOutputStream:Object.<init>()
FileOutputStream:String=File.getPath()
FileOutputStream:SecurityManager=System.getSecurityManager()
FileOutputStream:SecurityManager.checkWrite(String)
FileOutputStream:NullPointerException.<init>(String)
FileOutputStream:boolean=File.isInvalid()
FileOutputStream:FileNotFoundException.<init>(String, String)
FileOutputStream:FileDescriptor.<init>()
FileOutputStream:FileDescriptor.attach(Closeable)
FileOutputStream:FileOutputStream.open(String, boolean)
FileOutputStream:OutputStream.<init>()
FileOutputStream:Object.<init>()
FileOutputStream:SecurityManager=System.getSecurityManager()
FileOutputStream:NullPointerException.<init>(String)
FileOutputStream:SecurityManager.checkWrite(String)
FileOutputStream:FileDescriptor.attach(Closeable)
DesignParser:FilterOutputStream.<init>(OutputStream)
FilterOutputStream:OutputStream.<init>()
DesignParser:OutputStream.close()
DesignParser:PrintStream.println(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
PrintStream:String=String.valueOf(double)
PrintStream:PrintStream.print(Object)
PrintStream:PrintStream.newLine()
DesignParser:System.exit(int)
System:Runtime=Runtime.getRuntime()
System:Runtime.exit(int)
