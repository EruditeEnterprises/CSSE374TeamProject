digraph G {
fontname = " Bitstream Vera San"
fontsize =8
node [
style=filled
fillcolor=white
fontname = "Bitstream Vera Sans"
fontsize =8
shape = "record"]
edge [
fontname = "Bitstream Vera Sans"
fontsize =8
]
DesignParser [
label = "{DesignParser
|+ DEFAULT_CLASSES : String[]\l+ UML_OUTPUT : String\l+ SD_OUTPUT : String\l|+ \<clinit\>() : void\l+ \<init\>() : void\l+ main(String[]) : void\l}"
]
StringParser [
label = "{StringParser
||+ \<init\>() : void\l+ parseClassName(String) : String\l+ parametersFromSignature(String) : List\<String\>\l+ returnTypeFromSignature(String) : String\l+ fieldTypeFromSignature(String) : String\l+ getClassNames(List\<IClassData\>) : List\<String\>\l+ cleanAngleBrackets(String) : String\l}"
]
AbstractASMVisitor [
label = "{AbstractASMVisitor
|# classData : ClassData\l|+ \<init\>(int, AbstractASMVisitor) : void\l+ getClassData() : ClassData\l+ setClassData(ClassData) : void\l}"
]
ClassDeclarationVisitor [
label = "{ClassDeclarationVisitor
||+ \<init\>(int, AbstractASMVisitor) : void\l+ visit(int, int, String, String, String, String[]) : void\l}"
]
ClassFieldVisitor [
label = "{ClassFieldVisitor
|- level : String\l|+ \<init\>(int, AbstractASMVisitor) : void\l+ visitField(int, String, String, String, Object) : FieldVisitor\l+ addAccessLevel(int) : void\l}"
]
ClassMethodVisitor [
label = "{ClassMethodVisitor
|- level : String\l- calledByMethod : List\<IMethodCallData\>\l- callData : IMethodCallData\l|+ \<init\>(int, AbstractASMVisitor) : void\l+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l+ addAccessLevel(int) : void\l+ getMethodCalls() : List\<IMethodCallData\>\l+ setCallData(IMethodCallData) : void\l+ getCallData() : IMethodCallData\l}"
]
MethodBodyVisitor [
label = "{MethodBodyVisitor
|- method : IMethodData\l- methodCalls : List\<IMethodCallData\>\l- className : String\l|+ \<init\>(int, MethodVisitor) : void\l+ setMethod(IMethodData) : void\l+ visitMethodInsn(int, String, String, String, boolean) : void\l+ visitFieldInsn(int, String, String, String) : void\l+ visitTypeInsn(int, String) : void\l+ visitVarInsn(int, int) : void\l+ getMethodCalls() : List\<IMethodCallData\>\l+ setMethodCalls(List\<IMethodCallData\>) : void\l+ getClassName() : String\l+ setClassName(String) : void\l}"
]
VisitorManager [
label = "{VisitorManager
||+ \<init\>() : void\l+ visitClass(String) : AbstractASMVisitor\l+ visitMethods(String, IMethodCallData) : ClassMethodVisitor\l+ getMethodCalls(IMethodCallData) : List\<IMethodCallData\>\l}"
]
AdapterDetector [
label = "{AdapterDetector
|+ MIN_PERCENT_METHODS : double\l|+ \<init\>() : void\l+ findPattern(IClassData, IPackageModel) : void\l+ findPattern(IClassData) : void\l}"
]
DecoratorDetector [
label = "{DecoratorDetector
||+ \<init\>() : void\l+ findPattern(IClassData, IPackageModel) : void\l+ findPattern(IClassData) : void\l}"
]
InterfaceDetector [
label = "{InterfaceDetector
||+ \<init\>() : void\l+ findPattern(IClassData) : void\l+ findPattern(IClassData, IPackageModel) : void\l}"
]
IPatternDetector [
label = "{\<\<interface\>\>\nIPatternDetector
||+ findPattern(IClassData) : void\l+ findPattern(IClassData, IPackageModel) : void\l}"
]
SingletonDetector [
label = "{SingletonDetector
||+ \<init\>() : void\l+ findPattern(IClassData) : void\l+ findPattern(IClassData, IPackageModel) : void\l}"
]
CompositeDetector [
label = "{CompositeDetector
||+ \<init\>() : void\l+ findPattern(IClassData) : void\l+ findPattern(IClassData, IPackageModel) : void\l}"
]
ClassData [
label = "{ClassData
|- className : String\l- superClass : String\l- implementedClasses : List\<String\>\l- fields : List\<IFieldData\>\l- methods : List\<IMethodData\>\l- associatedClasses : List\<String\>\l- hasPattern : boolean\l- pattern : String\l- fill : String\l- isInterface : boolean\l|+ \<init\>() : void\l+ setHasPattern(boolean) : void\l+ setPattern(String) : void\l+ setFill(String) : void\l+ hasPattern() : boolean\l+ getPattern() : String\l+ getFill() : String\l+ getName() : String\l+ setName(String) : void\l+ getSuperClass() : String\l+ setSuperClass(String) : void\l+ getImplementedClasses() : List\<String\>\l+ setImplementedClasses(List\<String\>) : void\l+ addField(IFieldData) : void\l+ getFields() : List\<IFieldData\>\l+ addMethod(IMethodData) : void\l+ getMethods() : List\<IMethodData\>\l+ getUMLString() : String\l+ getAssociatedClasses() : List\<String\>\l+ accept(IVisitor) : void\l+ isInterface() : boolean\l+ setIsInterface(boolean) : void\l}"
]
IClassData [
label = "{\<\<interface\>\>\nIClassData
||+ getName() : String\l+ setName(String) : void\l+ getSuperClass() : String\l+ setSuperClass(String) : void\l+ getImplementedClasses() : List\<String\>\l+ setImplementedClasses(List\<String\>) : void\l+ addField(IFieldData) : void\l+ getFields() : List\<IFieldData\>\l+ addMethod(IMethodData) : void\l+ getMethods() : List\<IMethodData\>\l+ getUMLString() : String\l+ getAssociatedClasses() : List\<String\>\l+ hasPattern() : boolean\l+ getPattern() : String\l+ getFill() : String\l+ setPattern(String) : void\l+ setFill(String) : void\l+ setHasPattern(boolean) : void\l+ isInterface() : boolean\l+ setIsInterface(boolean) : void\l}"
]
FieldData [
label = "{FieldData
|- fieldName : String\l- access : String\l- type : String\l|+ \<init\>(String, String, Type, String) : void\l+ getName() : String\l+ getAccessLevel() : String\l+ getType() : String\l+ toString() : String\l+ setName(String) : void\l+ accept(IVisitor) : void\l}"
]
IFieldData [
label = "{\<\<interface\>\>\nIFieldData
||+ getAccessLevel() : String\l+ getType() : String\l+ setName(String) : void\l+ getName() : String\l}"
]
IMethodCallData [
label = "{\<\<interface\>\>\nIMethodCallData
||+ setCallingClass(String) : void\l+ getCallingClass() : String\l+ setMethod(IMethodData) : void\l+ getMethod() : IMethodData\l+ setMethodClass(String) : void\l+ getMethodClass() : String\l+ setDepth(int) : void\l+ getDepth() : int\l+ setName(String) : void\l+ getName() : String\l}"
]
MethodCallData [
label = "{MethodCallData
|- callingClass : String\l- methodClass : String\l- method : IMethodData\l- depth : int\l- methodName : String\l|+ \<init\>() : void\l+ setName(String) : void\l+ getName() : String\l+ setCallingClass(String) : void\l+ getCallingClass() : String\l+ setMethod(IMethodData) : void\l+ getMethod() : IMethodData\l+ setMethodClass(String) : void\l+ getMethodClass() : String\l+ toString() : String\l+ setDepth(int) : void\l+ getDepth() : int\l+ accept(IVisitor) : void\l}"
]
MethodData [
label = "{MethodData
|- name : String\l- type : String\l- access : String\l- args : List\<String\>\l- usedClasses : List\<String\>\l- createdClasses : List\<String\>\l|+ \<init\>(String, Type, String, Type[], String) : void\l+ addCreatedClass(String) : void\l+ getCreatedClasses() : List\<String\>\l+ setCreatedClasses(List\<String\>) : void\l+ getName() : String\l+ setName(String) : void\l+ getType() : String\l+ setType(String) : void\l+ getAccess() : String\l+ setAccess(String) : void\l+ getArgs() : List\<String\>\l+ setArgs(List\<String\>) : void\l+ toString() : String\l+ accept(IVisitor) : void\l+ addUsedClass(String) : void\l+ getUsedClasses() : List\<String\>\l+ setUsedClasses(List\<String\>) : void\l+ equals(Object) : boolean\l}"
]
IMethodData [
label = "{\<\<interface\>\>\nIMethodData
||+ getType() : String\l+ setType(String) : void\l+ getAccess() : String\l+ setAccess(String) : void\l+ getArgs() : List\<String\>\l+ setArgs(List\<String\>) : void\l+ addCreatedClass(String) : void\l+ getCreatedClasses() : List\<String\>\l+ setCreatedClasses(List\<String\>) : void\l+ addUsedClass(String) : void\l+ getUsedClasses() : List\<String\>\l+ setUsedClasses(List\<String\>) : void\l+ setName(String) : void\l+ getName() : String\l}"
]
IPackageModel [
label = "{\<\<interface\>\>\nIPackageModel
|+ classes : List\<IClassData\>\l+ classToInterfaces : Map\<String\>\l+ classToSuperclass : Map\<String\>\l+ classToAssociatedClasses : Map\<String\>\l+ classToMethods : Map\<IMethodData\>\l+ classNames : List\<String\>\l|+ \<clinit\>() : void\l+ getClassDataFromName(String) : IClassData\l+ getClasses() : List\<IClassData\>\l+ addClass(IClassData) : void\l+ setClasses(List\<IClassData\>) : void\l+ setClassRelations() : void\l+ getClassToInterfaces() : Map\<String\>\l+ setClassToInterfaces(Map\<String\>, List\<String\>) : void\l+ getClassToSuperclass() : Map\<String\>\l+ setClassToSuperclass(Map\<String\>, String) : void\l+ getClassToAssociatedClasses() : Map\<String\>\l+ setClassToAssociatedClasses(Map\<String\>, List\<String\>) : void\l+ getClassToMethods() : Map\<IMethodData\>\l+ setClassToMethods(Map\<String\>, List\<IMethodData\>) : void\l+ getClassNames() : List\<String\>\l+ setClassNames(List\<String\>) : void\l+ getDetectors() : List\<IPatternDetector\>\l+ setDetectors(List\<IPatternDetector\>) : void\l+ createArrows() : String\l+ getInheritanceArrows() : String\l+ getImplementsArrows() : String\l+ getAssociationArrows() : String\l+ getUsedClassesArrows() : String\l+ addSpecialArrow(SpecialArrowKey, String) : void\l}"
]
PackageModel [
label = "{PackageModel
|- classes : List\<IClassData\>\l- classToInterfaces : Map\<String\>\l- classToSuperclass : Map\<String\>\l- classToAssociatedClasses : Map\<String\>\l- classToMethods : Map\<IMethodData\>\l- classNames : List\<String\>\l- specialArrows : Map\<String\>\l- detectors : List\<IPatternDetector\>\l|+ \<init\>(List\<IPatternDetector\>) : void\l- scanForPatterns(IClassData) : void\l+ getClasses() : List\<IClassData\>\l+ addClass(IClassData) : void\l+ setClasses(List\<IClassData\>) : void\l+ setClassRelations() : void\l+ getClassToInterfaces() : Map\<String\>\l+ setClassToInterfaces(Map\<String\>, List\<String\>) : void\l+ getClassToSuperclass() : Map\<String\>\l+ setClassToSuperclass(Map\<String\>, String) : void\l+ getClassToAssociatedClasses() : Map\<String\>\l+ setClassToAssociatedClasses(Map\<String\>, List\<String\>) : void\l+ getClassToMethods() : Map\<IMethodData\>\l+ setClassToMethods(Map\<String\>, List\<IMethodData\>) : void\l+ getClassNames() : List\<String\>\l+ setClassNames(List\<String\>) : void\l+ getDetectors() : List\<IPatternDetector\>\l+ setDetectors(List\<IPatternDetector\>) : void\l+ createArrows() : String\l+ getInheritanceArrows() : String\l+ getImplementsArrows() : String\l+ getAssociationArrows() : String\l+ getUsedClassesArrows() : String\l+ accept(IVisitor) : void\l+ getClassDataFromName(String) : IClassData\l+ addSpecialArrow(SpecialArrowKey, String) : void\l}"
]
SpecialArrowKey [
label = "{SpecialArrowKey
|- toClass : String\l- fromClass : String\l- lineType : String\l|+ \<init\>(String, String, String) : void\l+ equals(Object) : boolean\l+ hashCode() : int\l}"
]
IVisitor [
label = "{\<\<interface\>\>\nIVisitor
||+ preVisit(ITraverser) : void\l+ visit(ITraverser) : void\l+ postVisit(ITraverser) : void\l+ addVisit(VisitType, IVisitMethod) : void\l+ removeVisit(VisitType) : void\l+ printToOutput(OutputStream) : void\l}"
]
AbstractVisitor [
label = "{AbstractVisitor
|# keyToVisitMethodMap : Map\<IVisitMethod\>\l# buffer : StringBuffer\l|+ \<init\>() : void\l+ preVisit(ITraverser) : void\l+ visit(ITraverser) : void\l+ postVisit(ITraverser) : void\l- doVisit(VisitType, ITraverser) : void\l+ addVisit(VisitType, IVisitMethod) : void\l+ removeVisit(VisitType) : void\l}"
]
ITraverser [
label = "{\<\<interface\>\>\nITraverser
||+ accept(IVisitor) : void\l}"
]
LookupKey [
label = "{LookupKey
|+ visitType : VisitType\l+ clazz : Class\<*\>\l|+ \<init\>(VisitType) : void\l+ hashCode() : int\l+ equals(Object) : boolean\l}"
]
SDEditVisitor [
label = "{SDEditVisitor
|- classSet : Set\<String\>\l- firstClass : String\l|+ \<init\>(String) : void\l+ printToOutput(OutputStream) : void\l}"
]
UMLVisitor [
label = "{UMLVisitor
||+ \<init\>() : void\l+ printToOutput(OutputStream) : void\l}"
]
VisitType [
label = "{VisitType
|+ PreVisit : VisitType\l+ Visit : VisitType\l+ PostVisit : VisitType\l- ENUM$VALUES : VisitType[]\l|+ \<clinit\>() : void\l- \<init\>(String, int) : void\l+ values() : VisitType[]\l+ valueOf(String) : VisitType\l}"
]
IVisitMethod [
label = "{\<\<interface\>\>\nIVisitMethod
||+ execute(ITraverser) : void\l}"
]
AbstractVisitMethod [
label = "{AbstractVisitMethod
|# buffer : StringBuffer\l|+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ClassPreVisit [
label = "{ClassPreVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ClassPostVisit [
label = "{ClassPostVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ClassVisit [
label = "{ClassVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
FieldVisit [
label = "{FieldVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
MethodVisit [
label = "{MethodVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ModelPostVisit [
label = "{ModelPostVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ModelPreVisit [
label = "{ModelPreVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
ModelVisit [
label = "{ModelVisit
||+ \<init\>(StringBuffer) : void\l+ execute(ITraverser) : void\l}"
]
edge [
arrowhead = "empty"
style = "solid"
]
ModelVisit -> AbstractVisitMethod
UMLVisitor -> AbstractVisitor
ClassDeclarationVisitor -> AbstractASMVisitor
ClassVisit -> AbstractVisitMethod
ClassFieldVisitor -> AbstractASMVisitor
SDEditVisitor -> AbstractVisitor
ModelPreVisit -> AbstractVisitMethod
FieldVisit -> AbstractVisitMethod
ClassMethodVisitor -> AbstractASMVisitor
ClassPreVisit -> AbstractVisitMethod
MethodVisit -> AbstractVisitMethod
ModelPostVisit -> AbstractVisitMethod
ClassPostVisit -> AbstractVisitMethod
edge [
arrowhead = "vee"
style = "solid"
]
AbstractASMVisitor -> ClassData
edge [
label = ""
]
MethodBodyVisitor -> IMethodData
edge [
label = ""
]
MethodCallData -> IMethodData
edge [
label = ""
]
ClassMethodVisitor -> IMethodCallData
edge [
label = ""
]
LookupKey -> VisitType
edge [
label = ""
]
VisitType -> VisitType
edge [
label = ""
]
edge [
arrowhead = "empty"
style = "dashed"
]
PackageModel -> IPackageModel
AbstractVisitMethod -> IVisitMethod
DecoratorDetector -> IPatternDetector
AbstractVisitor -> IVisitor
CompositeDetector -> IPatternDetector
MethodCallData -> IMethodCallData
IPackageModel -> ITraverser
SingletonDetector -> IPatternDetector
IMethodCallData -> ITraverser
FieldData -> IFieldData
InterfaceDetector -> IPatternDetector
ClassData -> IClassData
AdapterDetector -> IPatternDetector
MethodData -> IMethodData
IMethodData -> ITraverser
IClassData -> ITraverser
IFieldData -> ITraverser
edge [
arrowhead = "vee"
style = "dashed"
]
StringParser -> IClassData
ModelVisit -> ITraverser
UMLVisitor -> LookupKey
UMLVisitor -> FieldVisit
UMLVisitor -> MethodVisit
UMLVisitor -> ClassPreVisit
UMLVisitor -> ClassVisit
UMLVisitor -> ClassPostVisit
UMLVisitor -> ModelPreVisit
UMLVisitor -> ModelVisit
UMLVisitor -> ModelPostVisit
PackageModel -> IPatternDetector
PackageModel -> IMethodData
PackageModel -> SpecialArrowKey
PackageModel -> IVisitor
MethodBodyVisitor -> MethodCallData
MethodBodyVisitor -> IMethodCallData
ClassDeclarationVisitor -> AbstractASMVisitor
DesignParser -> SingletonDetector
DesignParser -> DecoratorDetector
DesignParser -> AdapterDetector
DesignParser -> InterfaceDetector
DesignParser -> CompositeDetector
DesignParser -> PackageModel
DesignParser -> UMLVisitor
DesignParser -> SDEditVisitor
IPatternDetector -> IPackageModel
ClassFieldVisitor -> FieldData
AbstractVisitor -> VisitType
AbstractVisitor -> IVisitMethod
ClassMethodVisitor -> MethodBodyVisitor
ClassMethodVisitor -> MethodData
VisitorManager -> ClassDeclarationVisitor
VisitorManager -> ClassFieldVisitor
VisitorManager -> ClassMethodVisitor
ClassData -> IFieldData
}
