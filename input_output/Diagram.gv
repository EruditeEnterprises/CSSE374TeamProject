digraph G {
fontname = " Bitstream Vera San"
fontsize =8
node [
style=filled
fillcolor=white
fontname = "Bitstream Vera Sans"
fontsize =8
shape = "record"]
edge [
fontname = "Bitstream Vera Sans"
fontsize =8
]
DecryptionInputStream [
fillcolor = green
label = "{DecryptionInputStream
\l\<\<decorator\>\>\l|- decryptor : IDecryption\l|+ \<init\>(InputStream, IDecryption) : void\l+ read() : int\l+ read(byte[], int, int) : int\l}"
]
EncryptionOutputStream [
fillcolor = green
label = "{EncryptionOutputStream
\l\<\<decorator\>\>\l|- encryptor : IEncryption\l|+ \<init\>(OutputStream, IEncryption) : void\l+ write(int) : void\l}"
]
IDecryption [
label = "{IDecryption
||+ decrypt(char) : char\l}"
]
IEncryption [
label = "{IEncryption
||+ encrypt(char) : char\l}"
]
SubstitutionCipher [
label = "{SubstitutionCipher
|- encryptionKey : char[]\l- decryptionKey : char[]\l|+ \<init\>() : void\l+ encrypt(char) : char\l+ decrypt(char) : char\l}"
]
TextEditorApp [
label = "{TextEditorApp
||+ \<init\>() : void\l+ main(String[]) : void\l}"
]
FilterInputStream [
fillcolor = green
label = "{FilterInputStream
\l\<\<decorator\>\>\l|# in : InputStream\l|# \<init\>(InputStream) : void\l+ read() : int\l+ read(byte[]) : int\l+ read(byte[], int, int) : int\l+ skip(long) : long\l+ available() : int\l+ close() : void\l+ mark(int) : void\l+ reset() : void\l+ markSupported() : boolean\l}"
]
FilterOutputStream [
fillcolor = green
label = "{FilterOutputStream
\l\<\<decorator\>\>\l|# out : OutputStream\l|+ \<init\>(OutputStream) : void\l+ write(int) : void\l+ write(byte[]) : void\l+ write(byte[], int, int) : void\l+ flush() : void\l+ close() : void\l}"
]
FileInputStream [
label = "{FileInputStream
|- fd : FileDescriptor\l- path : String\l- channel : FileChannel\l- closeLock : Object\l- closed : boolean\l|+ \<init\>(String) : void\l+ \<init\>(File) : void\l+ \<init\>(FileDescriptor) : void\l- open(String) : void\l+ read() : int\l- read0() : int\l- readBytes(byte[], int, int) : int\l+ read(byte[]) : int\l+ read(byte[], int, int) : int\l+ skip(long) : long\l+ available() : int\l+ close() : void\l+ getFD() : FileDescriptor\l+ getChannel() : FileChannel\l- initIDs() : void\l- close0() : void\l# finalize() : void\l+ access$000(FileInputStream) : void\l+ \<clinit\>() : void\l}"
]
FileOutputStream [
label = "{FileOutputStream
|- fd : FileDescriptor\l- append : boolean\l- channel : FileChannel\l- path : String\l- closeLock : Object\l- closed : boolean\l|+ \<init\>(String) : void\l+ \<init\>(String, boolean) : void\l+ \<init\>(File) : void\l+ \<init\>(File, boolean) : void\l+ \<init\>(FileDescriptor) : void\l- open(String, boolean) : void\l- write(int, boolean) : void\l+ write(int) : void\l- writeBytes(byte[], int, int, boolean) : void\l+ write(byte[]) : void\l+ write(byte[], int, int) : void\l+ close() : void\l+ getFD() : FileDescriptor\l+ getChannel() : FileChannel\l# finalize() : void\l- close0() : void\l- initIDs() : void\l+ access$000(FileOutputStream) : void\l+ \<clinit\>() : void\l}"
]
InputStream [
fillcolor = green
label = "{InputStream
\l\<\<component\>\>\l|- MAX_SKIP_BUFFER_SIZE : int\l|+ \<init\>() : void\l+ read() : int\l+ read(byte[]) : int\l+ read(byte[], int, int) : int\l+ skip(long) : long\l+ available() : int\l+ close() : void\l+ mark(int) : void\l+ reset() : void\l+ markSupported() : boolean\l}"
]
OutputStream [
fillcolor = green
label = "{OutputStream
\l\<\<component\>\>\l||+ \<init\>() : void\l+ write(int) : void\l+ write(byte[]) : void\l+ write(byte[], int, int) : void\l+ flush() : void\l+ close() : void\l}"
]
edge [
arrowhead = "empty"
style = "solid"
]
FilterInputStream -> InputStream
EncryptionOutputStream -> FilterOutputStream
FileOutputStream -> OutputStream
DecryptionInputStream -> FilterInputStream
FilterOutputStream -> OutputStream
FileInputStream -> InputStream
edge [
arrowhead = "vee"
style = "solid"
]
FilterInputStream -> InputStream
EncryptionOutputStream -> IEncryption
DecryptionInputStream -> IDecryption
FilterOutputStream -> OutputStream
edge [
arrowhead = "empty"
style = "dashed"
]
SubstitutionCipher -> IEncryption
SubstitutionCipher -> IDecryption
edge [
arrowhead = "vee"
style = "dashed"
]
EncryptionOutputStream -> OutputStream
DecryptionInputStream -> InputStream
TextEditorApp -> SubstitutionCipher
TextEditorApp -> DecryptionInputStream
TextEditorApp -> FileInputStream
TextEditorApp -> EncryptionOutputStream
TextEditorApp -> FileOutputStream
}
