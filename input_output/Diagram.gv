digraph G {
fontname = " Bitstream Vera San"
fontsize =8
node [
style=filled
fillcolor=white
fontname = "Bitstream Vera Sans"
fontsize =8
shape = "record"]
edge [
fontname = "Bitstream Vera Sans"
fontsize =8
]
App [
label = "{App
||+ \<init\>() : void\l+ main(String[]) : void\l}"
]
IteratorToEnumerationAdapter [
fillcolor = red
label = "{IteratorToEnumerationAdapter
\n\<\<adapter\>\>\n|- itr : Iterator\<TE\>\l|+ \<init\>(Iterator\<TE\>) : void\l+ hasMoreElements() : boolean\l+ nextElement() : TE\l}"
]
LinearTransformer [
label = "{LinearTransformer
|- enumTion : Enumeration\<TT\>\l|+ \<init\>(Enumeration\<TT\>) : void\l+ transform(OutputStream) : void\l}"
]
ArrayList [
label = "{ArrayList
|- serialVersionUID : long\l- DEFAULT_CAPACITY : int\l- EMPTY_ELEMENTDATA : Object[]\l- DEFAULTCAPACITY_EMPTY_ELEMENTDATA : Object[]\l+ elementData : Object[]\l- size : int\l- MAX_ARRAY_SIZE : int\l|+ \<init\>(int) : void\l+ \<init\>() : void\l+ \<init\>(Collection\<+TE\>) : void\l+ trimToSize() : void\l+ ensureCapacity(int) : void\l- ensureCapacityInternal(int) : void\l- ensureExplicitCapacity(int) : void\l- grow(int) : void\l- hugeCapacity(int) : int\l+ size() : int\l+ isEmpty() : boolean\l+ contains(Object) : boolean\l+ indexOf(Object) : int\l+ lastIndexOf(Object) : int\l+ clone() : Object\l+ toArray() : Object[]\l+ toArray([TT) : [TT\l+ elementData(I) : TE\l+ get(I) : TE\l+ set(ITE) : TE\l+ add(TE) : Z\l+ add(ITE) : void\l+ remove(I) : TE\l+ remove(Object) : boolean\l- fastRemove(int) : void\l+ clear() : void\l+ addAll(Collection\<+TE\>) : Z\l+ addAll(Collection\<+TE\>) : Z\l# removeRange(int, int) : void\l- rangeCheck(int) : void\l- rangeCheckForAdd(int) : void\l- outOfBoundsMsg(int) : String\l+ removeAll() : Z\l+ retainAll() : Z\l- batchRemove(Z) : Z\l- writeObject(ObjectOutputStream) : void\l- readObject(ObjectInputStream) : void\l+ listIterator(I) : ListIterator\<TE\>\l+ listIterator() : ListIterator\<TE\>\l+ iterator() : Iterator\<TE\>\l+ subList(II) : List\<TE\>\l+ subListRangeCheck(int, int, int) : void\l+ forEach(Consumer\<-TE\>) : void\l+ spliterator() : Spliterator\<TE\>\l+ removeIf(Predicate\<-TE\>) : Z\l+ replaceAll(UnaryOperator\<TE\>) : void\l+ sort(Comparator\<-TE\>) : void\l+ access$100(ArrayList) : int\l+ \<clinit\>() : void\l}"
]
Enumeration [
fillcolor = red
label = "{Enumeration
\n\<\<target\>\>\n||+ hasMoreElements() : boolean\l+ nextElement() : TE\l}"
]
Iterator [
fillcolor = red
label = "{Iterator
\n\<\<adaptee\>\>\n||+ hasNext() : boolean\l+ next() : TE\l+ remove() : void\l+ forEachRemaining(Consumer\<-TE\>) : void\l}"
]
OutputStream [
label = "{OutputStream
||+ \<init\>() : void\l+ write(int) : void\l+ write(byte[]) : void\l+ write(byte[], int, int) : void\l+ flush() : void\l+ close() : void\l}"
]
edge [
arrowhead = "empty"
style = "solid"
]
edge [
arrowhead = "vee"
style = "solid"
]
LinearTransformer -> Enumeration
edge [
label = ""
]
edge [
label = "\<\<adapts\>\>"
]
IteratorToEnumerationAdapter -> Iterator
edge [
label = ""
]
edge [
arrowhead = "empty"
style = "dashed"
]
IteratorToEnumerationAdapter -> Enumeration
edge [
arrowhead = "vee"
style = "dashed"
]
App -> ArrayList
App -> IteratorToEnumerationAdapter
App -> LinearTransformer
LinearTransformer -> OutputStream
}
