digraph G {
fontname = " Bitstream Vera San"
fontsize =8
node [
fontname = "Bitstream Vera Sans"
fontsize =8
shape = "record"]
edge [
fontname = "Bitstream Vera Sans"
fontsize =8
]
AbstractClassDataVisitor [
label = "{AbstractClassDataVisitor|# classData : Lproblem/asm/ClassData;\l|+ init(int, problem.asm.AbstractClassDataVisitor) : void\l+ getClassData() : problem.asm.ClassData\l}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
AbstractClassDataVisitor -> ClassData
ClassData [
label = "{ClassData|- name : Ljava/lang/String;\l- superClass : Ljava/lang/String;\l- interfaces : Ljava/util/List;\l- fields : Ljava/util/List;\l- methods : Ljava/util/List;\l- usedClasses : Ljava/util/Set;\l- associatedClasses : Ljava/util/Set;\l|+ init() : void\l+ getName() : java.lang.String\l+ setName(java.lang.String) : void\l+ getSuperClass() : java.lang.String\l+ setSuperClass(java.lang.String) : void\l+ getInterfaces(+ setInterfaces(java.util.List+ addField(problem.asm.FieldData) : void\l+ getFields(+ addMethod(problem.asm.MethodData) : void\l+ getMethods(+ toString() : java.lang.String\l+ getInheritsArrows() : java.lang.String\l+ getExtendsArrow(java.util.List+ getUsesArrows(java.util.List+ getAssociationArrows(java.util.List}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
ClassData -> FieldData
ClassData -> MethodData
ClassDeclarationVisitor [
label = "{ClassDeclarationVisitor||+ init(int, problem.asm.AbstractClassDataVisitor) : void\l+ visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) : void\l}"
]
edge [ 
arrowhead = "empty"
]
ClassDeclarationVisitor -> AbstractClassDataVisitor
edge [ 
arrowhead = "vee"
style = "dashed"
]
ClassFieldVisitor [
label = "{ClassFieldVisitor|- level : Ljava/lang/String;\l|+ init(int, problem.asm.AbstractClassDataVisitor) : void\l+ visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object) : org.objectweb.asm.FieldVisitor\l+ addAccessLevel(int) : void\l}"
]
edge [ 
arrowhead = "empty"
]
ClassFieldVisitor -> AbstractClassDataVisitor
edge [ 
arrowhead = "vee"
style = "dashed"
]
ClassMethodVisitor [
label = "{ClassMethodVisitor|- level : Ljava/lang/String;\l|+ init(int, problem.asm.AbstractClassDataVisitor) : void\l+ visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) : org.objectweb.asm.MethodVisitor\l+ addAccessLevel(int) : void\l}"
]
edge [ 
arrowhead = "empty"
]
ClassMethodVisitor -> AbstractClassDataVisitor
edge [ 
arrowhead = "vee"
style = "dashed"
]
DesignParser [
label = "{DesignParser|+ FOLDER_PATH : Ljava/lang/String;\l+ FILE_PREFIX : Ljava/lang/String;\l|+ init() : void\l+ main(java.lang.String[]) : void\l+ getClasses(java.lang.String, java.lang.String}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
FieldData [
label = "{FieldData|- fieldName : Ljava/lang/String;\l- signature : Ljava/lang/String;\l- access : Ljava/lang/String;\l- type : Lorg/objectweb/asm/Type;\l|+ init(java.lang.String, java.lang.String, org.objectweb.asm.Type, java.lang.String) : void\l+ getSignature() : java.lang.String\l+ setSignature(java.lang.String) : void\l+ getFieldName() : java.lang.String\l+ getAccessLevel() : java.lang.String\l+ getType() : org.objectweb.asm.Type\l+ toString() : java.lang.String\l}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
GraphVisPrinter [
label = "{GraphVisPrinter||+ init() : void\l+ makeUML(java.lang.String, java.util.List+ getClassNames(java.util.List}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
MethodData [
label = "{MethodData|- name : Ljava/lang/String;\l- type : Lorg/objectweb/asm/Type;\l- access : Ljava/lang/String;\l- args : [Lorg/objectweb/asm/Type;\l- signature : Ljava/lang/String;\l|+ init(java.lang.String, org.objectweb.asm.Type, java.lang.String, org.objectweb.asm.Type[], java.lang.String) : void\l+ getSignature() : java.lang.String\l+ setSignature(java.lang.String) : void\l+ getName() : java.lang.String\l+ setName(java.lang.String) : void\l+ getType() : org.objectweb.asm.Type\l+ setType(org.objectweb.asm.Type) : void\l+ getAccess() : java.lang.String\l+ setAccess(java.lang.String) : void\l+ getArgs() : org.objectweb.asm.Type[]\l+ setArgs(org.objectweb.asm.Type[]) : void\l+ toString() : java.lang.String\l}"
]
edge [ 
arrowhead = "vee"
style = "dashed"
]
}
